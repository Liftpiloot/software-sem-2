@{
    Layout = null;
}

@model ExerciseModel

<!DOCTYPE html>
<head>
    <title>@Model.Name</title>
    <Link rel="stylesheet" href="~/css/exercise.css"/>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@100..900&display=swap" rel="stylesheet">

    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Anta&display=swap" rel="stylesheet">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.4/Chart.js"></script>
    
    <meta name="viewport" content="width=device-width,height=device-height,initial-scale=1.0,maximum-scale=1.0"/>
</head>

<body>
<div class="workout-card">
    <div class="workout-logo">
        <img src="@Model.Logo" alt="Logo"/>
    </div>

    <div class="workout-info">
        <h1>@Model.Name</h1>
        <button id="del-button">
            <a href="@Url.Action("DeleteExercise", "Home", new { ID = Model.Id })">Delete from home</a>
        </button>
    </div>
</div>

<div class="chart-container">
    <h3>Max-weight</h3>
    <canvas id="chart"></canvas>
</div>

<div class="chart-container">
    <h3>Volume</h3>
    <canvas id="chart2"></canvas>
</div>

<script>
    let dataPoints = @Html.Raw(Json.Serialize(Model.DataPoints));
    dataPoints = dataPoints.map(function (x) {
        const date = new Date(x.x);
        const month = date.toLocaleString('default', { month: 'short' });
        const day = date.getDate();
        return {
            x: month + ' ' + day,
            y: x.y
        };
    });
    const x = dataPoints.map(x => x.x);
    console.log(x);
    const y = dataPoints.map(x => x.y);
    var ctx = document.getElementById('chart').getContext('2d');
    const chart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: x,
            datasets: [{
                label: 'Max weight',
                data: y,
                borderColor: '#5ab2c4',
                backgroundColor: 'rgba(0,0,0,0)',
                tension: 0.2
            }]
        },
        
        options: {
            scales: {
                x: {
                    type: 'time',
                    time: {
                        unit: 'day',
                        displayFormats: {
                            day: 'MMM DD',
                        }
                    }
                }
            },
            legend: {
                display: false
            }
        }
       
    });
    
    let dataPoints2 = @Html.Raw(Json.Serialize(Model.DataPoints2));
    dataPoints2 = dataPoints2.map(function (x) {
        const date = new Date(x.x);
        const month = date.toLocaleString('default', { month: 'short' });
        const day = date.getDate();
        return {
            x: month + ' ' + day,
            y: x.y
        };
    });
    const x2 = dataPoints2.map(x => x.x);
    console.log(x2);
    const y2 = dataPoints2.map(x => x.y);
    var ctx2 = document.getElementById('chart2').getContext('2d');
    const chart2 = new Chart(ctx2, {
        type: 'line',
        data: {
            labels: x2,
            datasets: [{
                label: 'Max reps',
                data: y2,
                borderColor: '#c45a5a',
                backgroundColor: 'rgba(0,0,0,0)',
                tension: 0.2
            }]
        },
        
        options: {
            scales: {
                x: {
                    type: 'time',
                    time: {
                        unit: 'day',
                        displayFormats: {
                            day: 'MMM DD',
                        }
                    }
                }
            },
            legend: {
                display: false
            }
        }
       
    });
    

    
    </script>
</body>