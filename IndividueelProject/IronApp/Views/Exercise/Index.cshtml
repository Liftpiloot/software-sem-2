@{
    Layout = null;
}

@model List<ExerciseModel>;

<!DOCTYPE html>
<head>
    <title>Home</title>
    <Link rel="stylesheet" href="~/css/home.css"/>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@100..900&display=swap" rel="stylesheet">

    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Anta&display=swap" rel="stylesheet">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>

    <meta name="viewport" content="width=device-width,height=device-height,initial-scale=1.0,maximum-scale=1.0"/>
</head>

<body style="display: flex">

<div>
<div class="iron-logo" style="position: initial;">
    <img src="~/images/iron_logo_new.png" alt="logo" width="100%"/>
</div>

<div id="workout-info" style="display: none">
    <button id="close-info" onclick="closeInfo()">X</button>
    <h3>
        WORKOUT SUMMARY
    </h3>
    <p id="workout-details">
        Details
    </p>
</div>
</div>

<div>
<div class="workout-header">

    @for (int i = 0; i < Model.Count; i++)
    {
        <div class="workout-card">
            <div class="workout-select" id="workout-select @i">
                <button class="workout-select-button" id="workout-select-button @i" OnClick="select_workout(@i)" Text="select"/>
            </div>
            <div class="workout-info" id="workout-info @i">
                <div class="workout-logo">
                    <a href="@Url.Action("Exercise", "Exercise", new { ID = Model[i].Id })">
                        <img src="@Model[i].Logo" alt="logo"/>
                    </a>

                </div>
                <div class="workout">
                    <h1>@Model[i].Name</h1>
                    <div class="weight-reps-sets">
                        <table class="workout-table" id="workout-table @i">
                            <tr>
                                <th>Weight</th>
                                <th>Reps</th>
                            </tr>
                        </table>
                        <button class="del-button" id="remove-row @i" onclick="delete_row(@i)">-</button>
                        <button class="add-button" id="add-row @i" onclick="add_row(@i)">+</button>
                    </div>
                </div>
            </div>
        </div>
    }
    <div id="save_workout">
        <a onclick="save_workout()">Save Workout</a>
    </div>

    <div id="add_workout">
        <a asp-action="ExerciseList" asp-controller="Exercise">Add Exercise</a>
    </div>
</div>



</div>
</body>


<script>
    var model = @Html.Raw(Json.Serialize(Model));

    function select_workout(i) {
        var div = document.getElementById("workout-select " + i);
        var table = document.getElementById('workout-table ' + i);
        var info = document.getElementById('workout-info ' + i);
        var inputs = table.getElementsByTagName('input');
        if (div.classList.contains("selected")) {
            div.classList.remove("selected");
            for (var j = 0; j < inputs.length; j++) {
                inputs[j].disabled = false;
                inputs[j].style.backgroundColor = "transparent";
            }
            info.classList.remove("workout-selected");
        }
        else {
            div.classList.add("selected");
            for (var j = 0; j < inputs.length; j++) {
                inputs[j].disabled = true;
                inputs[j].style.backgroundColor = "rgba(0,0,0,0.5)";
            }
            info.classList.add("workout-selected");
        }
    }

    // When the page loads, add a row to each table
    window.onload = function () {
        for (var i = 0; i < model.length; i++) {
        var sets = model[i].sets;
        if (sets===null || sets === undefined || sets.length === 0) {
            add_row(i);
        }
            else{
                for (var j = 0; j < sets.length; j++) {
                    add_filled_row(i, sets[j].weight, sets[j].reps);
                }
            }
        }
    }

    function add_filled_row(i, weight, reps){
        var id = 'workout-table ' + i;
        var table = document.getElementById('workout-table ' + i);
        var row = table.insertRow(-1);
        var cell1 = row.insertCell(0);
        var cell2 = row.insertCell(1);
        
        cell1.innerHTML = '<input type="number" class="weight-input" placeholder="KG" min="0" max="999.99" value="' + weight + '">';
        cell2.innerHTML = '<input type="number" class="reps-input" placeholder="Reps" min="0" max="999.99" value="' + reps + '">';
    }

    function add_row(i){
            var table = document.getElementById('workout-table ' + i);
            var row = table.insertRow(-1);
            var cell1 = row.insertCell(0);
            var cell2 = row.insertCell(1);
            cell1.innerHTML = '<input type="number" class="weight-input" placeholder="KG" min="0" max="999.99">';
            cell2.innerHTML = '<input type="number" class="reps-input" placeholder="Reps" min="0" max="999.99">';
    }

    function delete_row(i){
            var table = document.getElementById('workout-table ' + i);
            var rowCount = table.rows.length;
            if (rowCount > 2) {
                table.deleteRow(-1);
            }
    }
    
    function save_workout(){
        // Get the selected workouts
        var workout = [];
        for (var i = 0; i < model.length; i++) {
            var div = document.getElementById("workout-select " + i);
            if (div.classList.contains("selected")) {
                var sets = [];
                var table = document.getElementById('workout-table ' + i);
                for (var j = 1; j < table.rows.length; j++) {
                    const weight = parseFloat(table.rows[j].cells[0].children[0].value);
                    const reps = Math.floor(table.rows[j].cells[1].children[0].value);
                    if (!isNaN(weight) && !isNaN(reps) && weight !== 0 && reps !== 0){
                            sets.push({ Weight: weight, Reps: reps , Date: new Date()});
                    }
                    else{
                        alert("Please enter a valid weight and reps for each set.");
                        return;
                    }
                }
                if (sets.length > 0){
                    workout.push({ Id: model[i].id, Sets: sets });
                }
            }
        }
        $.ajax({
            url: '@Url.Action("SaveWorkout", "Exercise")',
            type: 'POST',
            data:JSON.stringify(workout),
            contentType: 'application/json',
            success: function(data) {
                //window.location.href = '@Url.Action("Index", "Exercise")';
                //unset the selected workouts
                for (var i = 0; i < model.length; i++) {
                    var div = document.getElementById("workout-select " + i);
                    if (div.classList.contains("selected")) {
                        select_workout(i);
                    }
                }
                var workoutInfo = "You have completed\n" + data.numexercises + " Exercises" + "\n\nWith a total volume of\n" + data.volume + "KG" + "\n\nAnd beat\n" + data.prs + " Personal Records";
                document.getElementById("workout-details").innerText = workoutInfo;
                document.getElementById("workout-info").style.display = "block";
            },
            error: function(){
                alert("Error saving workout. (Did you select at least one exercise?)");
            }
        })
    }
    
    function closeInfo(){
        document.getElementById("workout-info").style.display = "none";
    }

</script>